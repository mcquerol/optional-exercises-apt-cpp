#include "CCoordinate.h"

CCoordinate::CCoordinate(float x, float y, float z)
{
	m_x = x;
	m_y = y;
	m_z = z;

	std::cout << "object " << this << " was created" << std::endl;
	std::cout << "x = " << m_x << std::endl;
	std::cout << "y = " << m_y << std::endl;
	std::cout << "z = " << m_z << std::endl;
}

CCoordinate::~CCoordinate()
{
	std::cout << "object " << this << " was destroyed" << std::endl;
}

void CCoordinate::getPolar(float &r, float &phi, float &theta)
{
	r = sqrt((m_x^2 + m_y^2 + m_z^2));

	if (m_y >= 0)
	{
		phi = acosf(m_x/(sqrt((m_x^2 + m_y^2))));
	}
	else if(m_y < 0)
	{
		phi = acosf((2 * M_PI) - acosf(m_x/(sqrt((m_x^2 + m_y^2)))));
	}

	theta = (M_PI/2) - atanf((m_z/(sqrt((m_x^2 + m_y^2)))));
}

void CCoordinate::getCylinder(float &r, float &phi, float &h)
{
	r = sqrt((m_x^2 + m_y^2));

	if(m_x > 0)
	{
		phi = atan(m_y/m_x);
	}
	else if(m_x < 0 && m_y >= 0)
	{
		phi = atan(m_y/m_x) + M_PI;
	}
	else if(m_x < 0 && m_y < 0)
	{
		phi = atan(m_x/m_y) - M_PI;
	}
	else if(m_x == 0 && m_y == 0)
	{
		phi = atan(m_x/m_y) - (M_PI/2);
	}

	h = m_z;
}

void CCoordinate::getCartesian(float &x, float &y, float &z)
{
	x = this->m_x;
	y = this->m_y;
	z = this->m_z;

}

void CCoordinate::setCartesian(float x, float y, float z)
{
	m_x = x;
	m_y = y;
	m_z = z;
}

void CCoordinate::add(CCoordinate &c)
{
	this->m_x += c.m_x;
	this->m_y += c.m_y;
	this->m_z += c.m_z;

}

void CCoordinate::print(t_coordinate style)
{

}
